
Filters can be applied to the database when initializing the BGCExplorer object, like so:
BACSAC = BGCs(filters={'Kind':"saccharide", 'Genus':"Bacteroides"})

The 'filters' parameter is a dictionary where keys are column names (as shown in tables below), and the values are
desired matches to subset the database by. In the tables, the type of the values is also given. A 'string' filter
is a word like "saccharide", but SQL wild cards (%) can also be used (eg. "%ride" to match "saccharide" or "mynewride"). 
Lists can also be used: ["saccharide","polysaccharide"]. When integers are expected, use simple whole numbers. A more 
thorough set of examples is found at the bottom of this document. 

Multiple 'AND' like filters can be created simply by adding several key/value pairs to the filters dictionary. What happens
in the background is that the filters dictionary is used to build a SQL query. If other SQL logical operators are required
(OR/NOT), then a raw SQL query can be inserted to override the one generated by the filters 

--------------------------------------
ORGANISM
--------------------------------------
domain 					string or list
phylum 					string or list
class 					string or list
order					string or list
family					string or list
genus					string or list
species					string or list
taxon id 				int, string, or list 
status 					string or list in ["Finished", "Draft", "Permenant Draft"]
sequencing center		string or list
img genome id 			int, string, or list 
genome name 			string or list
genome name key 		string or list
genome size 			int, string, or list 
gene count 				int, string, or list 

--------------------------------------
CONTIG
--------------------------------------
contig 					int, string, or list 

--------------------------------------
BGC
--------------------------------------
cluster  				string or list
cluster idx 			int, string, or list
kind					string or list
start locus tag			string or list
end locus tag			string or list

--------------------------------------
GENE
--------------------------------------
img gene id 			int, string, or list
start 					int, string, or list
end 					int, string, or list

--------------------------------------
DOMAIN
--------------------------------------
pfam id 				string or list
sequence 				string or list
cluster finder prob		float, string, or list

--------------------------------------
SEQUENCE
--------------------------------------
locus tag 				string or list
sequence 				string or list


If type is 'string or list'
Accepts 		'string' matching desired rows (can have SQL wildcards), or a 'list' of desired rows (no wildcards)
Examples:
				string:  'Phylum':"Euryarchaeota"                      Matches only rows with 'Euryarchaeota' as the phylum
				string:  'Phylum':"Crenarchaeota"                      Matches only rows with 'Crenarchaeota' as the phylum
				list:    'Phylum':["Euryarchaeota","Crenarchaeota"]    Matches rows with either 'Euryarchaeota' or 'Crenarchaeota' as the phylum
				string:  'Phylum':"E%",                                Matches any phylum beginning with 'E'
				string:  'Phylum':"%e",                                Matches any phylum ending with 'e'
				string:  'Phylum':"%ea%",                              Matches any phylum with an 'ea' in the word
IF type is 'int, string, or list'
Accepts 		'int' matches desired rows of a single value, 'string' matches SQL like queries (>,<,>=,<=,BETWEEN), or a 'list' of values (integers; no wildcards)
Examples:
				int:     'IMG Genome ID':125255                        Matches rows with this IMG genome ID
				string:  'Genome Size':"<40000"                        Matches rows with genome sizes less than 40000
				string:  'Genome Size':">=40000"                       Matches rows with genome sizes greater than or equal to 40000
				string:  'Genome Size':"BETWEEN 40000 AND 80000"       Matches rows with genome sizes between 40000 and 80000 (inclusive)

NOTE:
It is the user's responsibility to use the filters correctly. Column names, values, and SQL santization are not validated 